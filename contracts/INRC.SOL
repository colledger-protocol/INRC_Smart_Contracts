// SPDX-License-Identifier: MIT
// Compatible with OpenZeppelin Contracts ^5.0.0
pragma solidity ^0.8.20;

import "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol";
import "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol";

contract MyToken is Initializable, ERC20Upgradeable, ERC20BurnableUpgradeable, OwnableUpgradeable, ERC20PermitUpgradeable {
    /// @custom:oz-upgrades-unsafe-allow constructor
    
   event issued(address indexed _recepient, uint _amount);

    
    mapping(address => uint) public balances;
    mapping(address => bool) blacklist ;

    // additional variables for use if transaction fees ever became necessary
    uint public basisPointsRate = 0; 
    uint public maximumFee = 0;

    modifier isNotBlacklisted(){
        require(!blacklist[msg.sender], "Blacklisted Address");
        _;
    }

    modifier onlyPayloadSize(uint size) {
     require(!(msg.data.length < size + 4));
     _;
    }

    constructor() {
        _disableInitializers();
    }

    function initialize(address initialOwner) initializer public {
        __ERC20_init("Indian Rupee Stable Coin ", "INRC");
        __ERC20Burnable_init();
        __Ownable_init(initialOwner);
        __ERC20Permit_init("INRC");
    }


    function INRC_ISSUE(address _recepient, uint256 _amount) public onlyOwner {
         require(totalSupply() + amount <= MAX_SUPPLY, "Mint exceeds total supply");
        _mint(_recepient, _amount);
        emit issued(_recepient, _amount);
    }


    function INRC_TRANSFER(address _recepient, uint _amount) public onlyPayloadSize(2 * 32)  isNotbBlacklisted {
        uint fee = (_amount.mul(basisPointsRate)).div(10000);
        if (fee > maximumFee) {
            fee = maximumFee;
        }
        uint sendAmount = _amount.sub(fee);
        balances[msg.sender] = balances[msg.sender].sub(_value);
        balances[_to] = balances[_recepient].add(sendAmount);
      
        if (fee > 0) {
            balances[owner] = balances[owner].add(fee);
            Transfer(msg.sender, owner, fee);
        }
        Transfer(msg.sender, _to, sendAmount);
    }


    function blacklistUser(address _blacklistAddress) public onlyOwner {
        blacklist[_blacklistAddress] = true;
    }

    function removeBlacklist(address _blacklistAddress) public onlyOwner {
        blacklist[_blacklistAddress] = false ;
    }


    function updateFee(uint _setBaseFee, uint _newMaxFee) public onlyOwner {

        // Ensure transparency by hardcoding limit beyond which fees can never be added
        // require(basisPointsRate);
        // require(maximumFee);
        basisPointsRate _setBaseFee ; 
        maximumFee =   _newMaxFee.mul(10**decimals);

    }

//Who should burn the token ? Only Owner or anyone
    function INRC_BURN() public onlyOwner {
        require(totalSupply() > msg.value , "");
    }

    





    

    // @param _amount Number of tokens to be issued
    // function redeem(uint amount) public onlyOwner {
    //     require(_totalSupply >= amount);
    //     require(balances[owner] >= amount);

    //     _totalSupply -= amount;
    //     balances[owner] -= amount;
    //     Redeem(amount);
    // }










     










    






}